//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFChatClient.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserMessage", Namespace="http://schemas.datacontract.org/2004/07/WCFChatService")]
    [System.SerializableAttribute()]
    public partial class UserMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubmitterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Submitter {
            get {
                return this.SubmitterField;
            }
            set {
                if ((object.ReferenceEquals(this.SubmitterField, value) != true)) {
                    this.SubmitterField = value;
                    this.RaisePropertyChanged("Submitter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCFChatService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChat")]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SubmitChatt", ReplyAction="http://tempuri.org/IChat/SubmitChattResponse")]
        void SubmitChatt(WCFChatClient.ChatService.UserMessage post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SubmitChatt", ReplyAction="http://tempuri.org/IChat/SubmitChattResponse")]
        System.Threading.Tasks.Task SubmitChattAsync(WCFChatClient.ChatService.UserMessage post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetChats", ReplyAction="http://tempuri.org/IChat/GetChatsResponse")]
        WCFChatClient.ChatService.UserMessage[] GetChats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetChats", ReplyAction="http://tempuri.org/IChat/GetChatsResponse")]
        System.Threading.Tasks.Task<WCFChatClient.ChatService.UserMessage[]> GetChatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/RemoveChatt", ReplyAction="http://tempuri.org/IChat/RemoveChattResponse")]
        void RemoveChatt(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/RemoveChatt", ReplyAction="http://tempuri.org/IChat/RemoveChattResponse")]
        System.Threading.Tasks.Task RemoveChattAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SaveToDatabase", ReplyAction="http://tempuri.org/IChat/SaveToDatabaseResponse")]
        void SaveToDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/SaveToDatabase", ReplyAction="http://tempuri.org/IChat/SaveToDatabaseResponse")]
        System.Threading.Tasks.Task SaveToDatabaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetChatFromDatabase", ReplyAction="http://tempuri.org/IChat/GetChatFromDatabaseResponse")]
        WCFChatClient.ChatService.UserMessage[] GetChatFromDatabase(int roomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetChatFromDatabase", ReplyAction="http://tempuri.org/IChat/GetChatFromDatabaseResponse")]
        System.Threading.Tasks.Task<WCFChatClient.ChatService.UserMessage[]> GetChatFromDatabaseAsync(int roomID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/RegisterUser", ReplyAction="http://tempuri.org/IChat/RegisterUserResponse")]
        void RegisterUser(string userName, string password, string gender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/RegisterUser", ReplyAction="http://tempuri.org/IChat/RegisterUserResponse")]
        System.Threading.Tasks.Task RegisterUserAsync(string userName, string password, string gender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/LogInUser", ReplyAction="http://tempuri.org/IChat/LogInUserResponse")]
        WCFChatClient.ChatService.User LogInUser(string userName, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/LogInUser", ReplyAction="http://tempuri.org/IChat/LogInUserResponse")]
        System.Threading.Tasks.Task<WCFChatClient.ChatService.User> LogInUserAsync(string userName, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/LogOutUser", ReplyAction="http://tempuri.org/IChat/LogOutUserResponse")]
        void LogOutUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/LogOutUser", ReplyAction="http://tempuri.org/IChat/LogOutUserResponse")]
        System.Threading.Tasks.Task LogOutUserAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : WCFChatClient.ChatService.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.ClientBase<WCFChatClient.ChatService.IChat>, WCFChatClient.ChatService.IChat {
        
        public ChatClient() {
        }
        
        public ChatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SubmitChatt(WCFChatClient.ChatService.UserMessage post) {
            base.Channel.SubmitChatt(post);
        }
        
        public System.Threading.Tasks.Task SubmitChattAsync(WCFChatClient.ChatService.UserMessage post) {
            return base.Channel.SubmitChattAsync(post);
        }
        
        public WCFChatClient.ChatService.UserMessage[] GetChats() {
            return base.Channel.GetChats();
        }
        
        public System.Threading.Tasks.Task<WCFChatClient.ChatService.UserMessage[]> GetChatsAsync() {
            return base.Channel.GetChatsAsync();
        }
        
        public void RemoveChatt(int id) {
            base.Channel.RemoveChatt(id);
        }
        
        public System.Threading.Tasks.Task RemoveChattAsync(int id) {
            return base.Channel.RemoveChattAsync(id);
        }
        
        public void SaveToDatabase() {
            base.Channel.SaveToDatabase();
        }
        
        public System.Threading.Tasks.Task SaveToDatabaseAsync() {
            return base.Channel.SaveToDatabaseAsync();
        }
        
        public WCFChatClient.ChatService.UserMessage[] GetChatFromDatabase(int roomID) {
            return base.Channel.GetChatFromDatabase(roomID);
        }
        
        public System.Threading.Tasks.Task<WCFChatClient.ChatService.UserMessage[]> GetChatFromDatabaseAsync(int roomID) {
            return base.Channel.GetChatFromDatabaseAsync(roomID);
        }
        
        public void RegisterUser(string userName, string password, string gender) {
            base.Channel.RegisterUser(userName, password, gender);
        }
        
        public System.Threading.Tasks.Task RegisterUserAsync(string userName, string password, string gender) {
            return base.Channel.RegisterUserAsync(userName, password, gender);
        }
        
        public WCFChatClient.ChatService.User LogInUser(string userName, string key) {
            return base.Channel.LogInUser(userName, key);
        }
        
        public System.Threading.Tasks.Task<WCFChatClient.ChatService.User> LogInUserAsync(string userName, string key) {
            return base.Channel.LogInUserAsync(userName, key);
        }
        
        public void LogOutUser(string userName) {
            base.Channel.LogOutUser(userName);
        }
        
        public System.Threading.Tasks.Task LogOutUserAsync(string userName) {
            return base.Channel.LogOutUserAsync(userName);
        }
    }
}
